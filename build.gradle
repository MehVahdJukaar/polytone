plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.7-SNAPSHOT" apply false
    id 'io.github.juuxel.loom-quiltflower' version '1.7.1' apply false
    id 'io.github.juuxel.loom-vineflower' version '1.11.0' apply false
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
    id "com.github.breadmoirai.github-release" version "2.4.1"
}


architectury {
    minecraft = minecraft_version
}

repositories{
    mavenCentral()
}

static def listGameVersions(String minVersion, String maxVersion) {
    def parseVersion = { version ->
        def parts = version.split('\\.').collect { it as Integer }
        if (parts.size() == 2) parts << 0 // Treat X.Y as X.Y.0
        parts
    }

    def minParts = parseVersion(minVersion)
    def maxParts = parseVersion(maxVersion)

    def versions = []
    def currentVersion = minParts.clone()

    // Helper function to compare versions
    def isLessThanOrEqual = { a, b ->
        for (int i = 0; i < a.size(); i++) {
            if (a[i] < b[i]) return true
            if (a[i] > b[i]) return false
        }
        return true
    }

    while (isLessThanOrEqual(currentVersion, maxParts)) {
        versions << currentVersion.join('.')
        currentVersion[2]++ // Increment last part

        if (currentVersion[2] > maxParts[2] && currentVersion[1] < maxParts[1]) {
            currentVersion[1]++  // Increment middle part if we've exceeded the last part max
            currentVersion[2] = 0
        }
    }

    return versions
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "io.github.juuxel.loom-quiltflower"
    apply plugin: "com.matthewprenger.cursegradle"
    apply plugin: "com.modrinth.minotaur"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings loom.layered() {
            it.officialMojangMappings {
                setNameSyntheticMembers(false)
            }
            it.parchment("org.parchmentmc.data:parchment-${parchment_version}")
        }
    }

    var env = System.getenv()
    var modLoader = name

    var changelogFile = rootProject.file("changelog.md")
    var changelogText = changelogFile.exists() ? changelogFile.text : ""

    var versions = listGameVersions(minecraft_min_version, minecraft_version)

    if (env.MODRINTH_TOKEN) {
        modrinth {
            projectId = rootProject.mod_id
            uploadFile = tasks.remapJar
            gameVersions = versions
            if (modLoader == "forge") {
                loaders = ["neoforge"]
            } else loaders = [modLoader]
            changelog = changelogText

            if (modLoader == "fabric") {
                dependencies {
                    required.project "fabric-api"
                }
            } else {
                dependencies {
                }
            }
        }
    }

    if (env.CURSEFORGE_TOKEN) {
        curseforge {
            apiKey = env.CURSEFORGE_TOKEN
            project {
                id = project_id
                changelog = changelogText
                releaseType = 'release'
                for(v in versions) {
                    addGameVersion v
                }

                if (modLoader == "neoforge") {
                    addGameVersion("NeoForge")
                } else addGameVersion modLoader.capitalize()

                mainArtifact(tasks.remapJar)

                if (modLoader == "fabric") {
                    relations {
                        requiredDependency "fabric-api"
                    }
                } else {
                }
            }
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = mod_id
    version = mod_version
    group = mod_group_id


    repositories {

        flatDir {
            dirs 'mods'
        }

        mavenCentral()

        mavenLocal()

        maven { url "https://maven.parchmentmc.org" }

        maven {
            url = "https://www.cursemaven.com"
            allowInsecureProtocol = true
        }

        maven {
            url "https://maven.firstdarkdev.xyz/snapshots"
        }

        maven {
            name = 'Ladysnake Mods'
            url = 'https://maven.ladysnake.org/releases'
        }

        maven { url 'https://jitpack.io' }

        maven {
            url = 'https://maven.neoforged.net'
        }

        maven {
            url = "https://api.modrinth.com/maven"
        }

        maven {
            url = "https://maven.blamejared.com/"
        }

    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        withSourcesJar()
    }
}

githubRelease {
    owner = 'MehVahdJukaar'
    repo = 'polytone'
    tagName = 'latest'
    releaseName = 'Sample Pack'
    body = 'Polytone Sample Pack'
    draft = false
    prerelease = false
    overwrite = true
}

task zipFolder(type: Zip) {
    from 'polytone_sample_pack'
    destinationDirectory = file('./')
    archiveFileName = 'polytone_sample_pack.zip'

    doLast {
        def zipFile = file('polytone_sample_pack.zip')
        if (zipFile.exists()) {
            // Upload the release using the GitHub plugin's `releaseAssets` feature
            def releaseTask = tasks.named('githubRelease').get()
            releaseTask.releaseAssets = zipFile
        } else {
            throw new GradleException("ZIP file not found: ${zipFile}")
        }
    }
}

task uplodRelease {
    dependsOn zipFolder
    dependsOn tasks.named('githubRelease').get()
}
